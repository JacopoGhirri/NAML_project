setwd("C:/Users/user/Desktop/universit√†/dare/Numerical Analysis for Machine Learning/NAML proj/NAML_repo/NAML_project/White_box/Dati")
#####
library(MASS)
library(class)
library(mvtnorm)
library(mvnormtest)
install.packages("mvnormtest")
library(mvnormtest)
library(car)
library(MASS)
library(class)
library(readr)
library(rms)
install.packages("rms")
install.packages("arm")
library(rms)
library(arm)
library(ResourceSelection)
install.packages("ResourceSelection")
install.packages("pROC")
#####
library(MASS)
library(class)
library(mvtnorm)
library(mvnormtest)
library(car)
library(MASS)
#####
library(MASS)
library(class)
library(mvtnorm)
library(mvnormtest)
library(car)
library(MASS)
library(class)
library(readr)
library(rms)
library(arm)
library(ResourceSelection)
library(pROC)
mcshapiro.test <- function(X, devstmax = 0.01, sim = ceiling(1/(4*devstmax^2)))
{
library(mvnormtest)
n   <- dim(X)[1]
p   <- dim(X)[2]
mu  <- rep(0,p)
sig <- diag(p)
W   <- NULL
for(i in 1:sim)
{
Xsim <- rmvnorm(n, mu, sig)
W   <- c(W, mshapiro.test(t(Xsim))$stat)
# mshapiro.test(X): compute the statistics min(W) for the sample X
}
Wmin   <- mshapiro.test(t(X))$stat   # min(W) for the given sample
pvalue <- sum(W < Wmin)/sim          # proportion of min(W) more extreme than the observed Wmin
devst  <- sqrt(pvalue*(1-pvalue)/sim)
list(Wmin = as.vector(Wmin), pvalue = pvalue, devst = devst, sim = sim)
}
classical_data<- read_csv("classical.csv")
classical_data$binary_genre<-0
hiphop_data<-read_csv("hiphop.csv")
hiphop_data$binary_genre<-1
data<-rbind(classical_data,hiphop_data)
genre<-factor(data$binary_genre)
levels(genre)
#priors
p<-c(1/2,1/2)
#gauss
mcshapiro.test(data[which(data$binary_genre=="1"),1:7])
mcshapiro.test(data[which(data$binary_genre=="0"),1:7])
#covariance
v1<-var(data[which(data$binary_genre==1),1:7])
v2<-var(data[which(data$binary_genre==0),1:7])
v1
v2
#QDA (dati gaussiani, no same covariance)
q<-qda(data$binary_genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast  ,prior=p)
q #means
#aper
Qda.m <- predict(q)
f= factor(genre)
table(true.lable=f, class.assigned=Qda.m$class)
l <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Qda.m$class )
APER_qda <- 0
for(i in 1:l){
APER_qda <- APER_qda + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER_qda
#LDA (dati NON gaussiani, same covariance)
l<-lda(data$binary_genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast  ,prior=p)
l #means
#aper
Lda.m <- predict(l)
f= factor(genre)
table(true.lable=f, class.assigned=Lda.m$class)
len <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Lda.m$class )
APER_lda <- 0
for(i in 1:len){
APER_lda <- APER_lda + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER_lda
glm_model<-glm(data$binary_genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model)
glm_model$residuals
glm_model_red <-glm(data$binary_genre~ data$zcr+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model_red)
glm_model_red <-glm(data$binary_genre~ data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model_red)
glm_model_red <-glm(data$binary_genre~ data$mean_chroma+data$spec_flat+data$hf_contrast+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model_red)
glm_model_red <-glm(data$binary_genre~ data$mean_chroma+data$hf_contrast+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model_red)
glm_model_red <-glm(data$binary_genre~ data$mean_chroma+data$hf_contrast,family=binomial( link = logit ))
summary(glm_model_red)
glm_model_red <-glm(data$binary_genre~ data$mean_chroma+data$hf_contrast,family=binomial( link = logit ))
glm_model_red <-glm(data$binary_genre~ data$mean_chroma,family=binomial( link = logit ))
summary(glm_model_red)
test_data<-rbind(classical_data[0:80,],hiphop_data[0:80,:])
test_data<-rbind(classical_data[0:80,],hiphop_data[0:80,])
train_data<-rbind(classical_data[0:80,],hiphop_data[0:80,])
test_data<-rbind(classical_data[81:,],hiphop_data[81:,])
test_data<-rbind(classical_data[81:100,],hiphop_data[81:100,])
#gauss
mcshapiro.test(train_data[which(data$binary_genre=="1"),1:7])
#gauss
mcshapiro.test(train_data[which(train_data$binary_genre=="1"),1:7])
mcshapiro.test(train_data[which(train_data$binary_genre=="0"),1:7])
#covariance
v1<-var(data[which(data$binary_genre==1),1:7])
v2<-var(data[which(data$binary_genre==0),1:7])
v1
v2
#####
#QDA (dati gaussiani, no same covariance)
q<-qda(train_data$binary_genre~ train_data$zcr+train_data$rms_energy+train_data$mean_chroma+train_data$spec_flat+train_data$hf_contrast+train_data$mf_contrast+train_data$lf_contrast  ,prior=p)
q #means
#aper
Qda.m <- predict(q, test_data[,1:7])
#aper
Qda.m <- predict(q, newdata = data.frame(test_data[,1:7]))
test_data
data.frame(test_data[,1:7])
test_data
?predict
#aper
Qda.m <- predict.qda(q, newdata = data.frame(test_data[,1:7]))
#aper
Qda.m <- predict(q, newdata = data.frame(test_data[,1:7]), method = "plug-in")
#aper
Qda.m <- predict(object = q, newdata = data.frame(test_data[,1:7]), method = "plug-in")
#####
#QDA (dati gaussiani, no same covariance)
q<-qda(binary_genre~ zcr+rms_energy+mean_chroma+spec_flat+hf_contrast+mf_contrast+lf_contrast,prior=p, data = train_data)
q #means
#aper
Qda.m <- predict(object = q, newdata = data.frame(test_data[,1:7]), method = "plug-in")
genre
f= factor(test_data$binary_genre)
table(true.lable=f, class.assigned=Qda.m$class)
l <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Qda.m$class )
APER_qda <- 0
for(i in 1:l){
APER_qda <- APER_qda + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER_qda
