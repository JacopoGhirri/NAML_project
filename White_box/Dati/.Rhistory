install.packages("Rcpp")
library(Rcpp)
Rcpp.package.skeleton("foobar2")
setwd("D:/Marta/Politecnico/Numerical analysis for machine learning/Project")
setwd("D:/Marta/Politecnico/Numerical analysis for machine learning/Project/NAML_project/White_box/Dati")
#####
library(MASS)
library(class)
library(mvtnorm)
library(mvnormtest)
library(car)
library(MASS)
library(class)
mcshapiro.test <- function(X, devstmax = 0.01, sim = ceiling(1/(4*devstmax^2)))
{
library(mvnormtest)
n   <- dim(X)[1]
p   <- dim(X)[2]
mu  <- rep(0,p)
sig <- diag(p)
W   <- NULL
for(i in 1:sim)
{
Xsim <- rmvnorm(n, mu, sig)
W   <- c(W, mshapiro.test(t(Xsim))$stat)
# mshapiro.test(X): compute the statistics min(W) for the sample X
}
Wmin   <- mshapiro.test(t(X))$stat   # min(W) for the given sample
pvalue <- sum(W < Wmin)/sim          # proportion of min(W) more extreme than the observed Wmin
devst  <- sqrt(pvalue*(1-pvalue)/sim)
list(Wmin = as.vector(Wmin), pvalue = pvalue, devst = devst, sim = sim)
}
#data generation
library(readr)
jazz_data<- read_csv("jazz.csv")
View(jazz_data)
jazz_data$genre<-jazz
jazz_data$genre<-"jazz"
jazz_data<- read_csv("jazz.csv")
jazz_data$genre<-"jazz"
classical_data<-read_csv("classical.csv")
classical_data$genre<-"classical"
rock_data<-read_csv("rock.csv")
rock_data$genre<-"rock"
data<-rowbind(jazz_data,classical_data,rock_data)
data<-rbind(jazz_data,classical_data,rock_data)
View(data)
genre<-factor(data$genre)
levels(genre)
#priors
p<-1/3
mcshapiro.test(data[which(),1:4])
mcshapiro.test(data[which(genre=="classical"),1:4])
mcshapiro.test(data[which(genre=="jazz"),1:4])
mcshapiro.test(data[which(genre=="rock"),1:4])
mcshapiro.test(data[which(genre=="classical"),1:2])
mcshapiro.test(data[which(genre=="classical"),2:3])
mcshapiro.test(data[which(genre=="classical"),3:4])
mcshapiro.test(data[which(genre=="classical"),3])
mcshapiro.test(data[which(genre=="classical"),1])
mcshapiro.test(data[which(genre=="classical"),2])
mcshapiro.test(data[which(genre=="classical"),3])
mcshapiro.test(data[which(genre=="classical"),4])
plot(datadata[which(genre=="classical"),1:2])
plot(data[which(genre=="classical"),1:2])
plot(data[which(genre=="classical" or genre=="jazz"),1:2] )
plot(data[which(genre=="classical" || genre=="jazz"),1:2] )
plot(data[which(genre=="classical"),1:2], col="r")
plot(data[which(genre=="classical"),1:2], col="b")
plot(data[which(genre=="classical"),1:2], color="b")
plot(data[which(genre=="classical"),1:2], col="red")
points(data[which(genre=="jazz"),1:2], col="green")
plot(data[which(genre=="classical"),1:2], col="red")
points(data[which(genre=="rock"),1:2], col="green")
v1<-var(data[which(genre=="classical"),1:4])
v2<-var(data[which(genre=="jazz"),1:4])
v3<-var(data[which(genre=="rock"),1:4])
v1
v2
v3
#priors
p<-c(1/3,1/3,1/3)
q<-qda(data$genre~ data$`# zero_crossing_rate`+ data$RMS_energy + data$mean_Chromagram + data$spectral_flatness ,prior=p)
q #means
#aper
Qda.m <- predict(q)
f= factor(genre)
table(true.lable=f, class.assigned=Qda.m$class)
l <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Qda.m$class )
p <- prior
l <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Qda.m$class )
APER <- 0
for(i in 1:l){
APER <- APER + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER
#priors
p<-1/7*ones(7)
#priors
p<-1/7*eyes(7)
#priors
p<-1/7*eye(7)
#priors
p<-rep(1/7,7)
#logistic regression + covariate selection
glm_model<-glm(data$genre~ data$`# zero_crossing_rate`+ data$RMS_energy + data$mean_Chromagram + data$spectral_flatness,family="binomial")
jazz_data<- read_csv("jazz.csv")
jazz_data$genre<-"jazz"
jazz_data$binary_genre<-0
classical_data<-read_csv("classical.csv")
classical_data$genre<-"classical"
classical_data$binary_genre<-1
data<-rbind(jazz_data,classical_data)
genre<-factor(data$genre)
levels(genre)
glm_model<-glm(data$binary_genre~ data$`# zero_crossing_rate`+ data$RMS_energy + data$mean_Chromagram + data$spectral_flatness,family="binomial")
glm_model
glm_model<-glm(data$binary_genre~ data$`# zero_crossing_rate`+ data$RMS_energy + data$mean_Chromagram + data$spectral_flatness,family=binomial( link = logit ))
glm_model
library( rms )
library(arm)
library(ResourceSelection)
library(pROC)
setwd("D:/Marta/Politecnico/Numerical analysis for machine learning/Project/NAML_project/White_box/Dati")
#####
library(MASS)
library(class)
library(mvtnorm)
library(mvnormtest)
library(car)
library(MASS)
library(class)
mcshapiro.test <- function(X, devstmax = 0.01, sim = ceiling(1/(4*devstmax^2)))
{
library(mvnormtest)
n   <- dim(X)[1]
p   <- dim(X)[2]
mu  <- rep(0,p)
sig <- diag(p)
W   <- NULL
for(i in 1:sim)
{
Xsim <- rmvnorm(n, mu, sig)
W   <- c(W, mshapiro.test(t(Xsim))$stat)
# mshapiro.test(X): compute the statistics min(W) for the sample X
}
Wmin   <- mshapiro.test(t(X))$stat   # min(W) for the given sample
pvalue <- sum(W < Wmin)/sim          # proportion of min(W) more extreme than the observed Wmin
devst  <- sqrt(pvalue*(1-pvalue)/sim)
list(Wmin = as.vector(Wmin), pvalue = pvalue, devst = devst, sim = sim)
}
#####
#data generation
library(readr)
jazz_data<- read_csv("jazz.csv")
View(jazz_data)
jazz_data$genre<-"jazz"
classical_data<-read_csv("classical.csv")
classical_data$genre<-"classical"
rock_data<-read_csv("rock.csv")
rock_data$genre<-"rock"
data<-rbind(jazz_data,classical_data,rock_data)
View(data)
genre<-factor(data$genre)
levels(genre)
plot(data[which(genre=="classical"),1:2], col="red")
points(data[which(genre=="jazz"),1:2], col="green")
points(data[which(genre=="rock"),1:2], col="blue")
#priors
p<-rep(1/7,7)
#gauss
mcshapiro.test(data[which(genre=="classical"),1:7])
mcshapiro.test(data[which(genre=="jazz"),1:7])
mcshapiro.test(data[which(genre=="rock"),1:7])
#covariance
v1<-var(data[which(genre=="classical"),1:7])
v2<-var(data[which(genre=="jazz"),1:7])
v3<-var(data[which(genre=="rock"),1:7])
v1
v2
v3
#QDA (dati gaussiani, no same covariance)
q<-qda(data$genre~  ,prior=p)
#QDA (dati gaussiani, no same covariance)
q<-qda(data$genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast ,prior=p)
#priors
p<-rep(1/3,3)
#QDA (dati gaussiani, no same covariance)
q<-qda(data$genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast ,prior=p)
q #means
#aper
Qda.m <- predict(q)
f= factor(genre)
table(true.lable=f, class.assigned=Qda.m$class)
l <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Qda.m$class )
APER_qda <- 0
for(i in 1:l){
APER_qda <- APER_qda + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER_qda
#LDA (dati NON gaussiani, same covariance)
l<-lda(data$genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast  ,prior=p)
l #means
#aper
Lda.m <- predict(l)
f= factor(genre)
table(true.lable=f, class.assigned=Lda.m$class)
len <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Lda.m$class )
APER_lda <- 0
for(i in 1:len){
APER_lda <- APER_lda + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER_lda
print(APER_qda,APER_lda)
APER_qda,APER_lda
APER_qda
APER_lda
install.packages("rms")
install.packages("arm")
install.packages("ResourceSelection")
install.packages("pROC")
setwd("D:/Marta/Politecnico/Numerical analysis for machine learning/Project/NAML_project/White_box/Dati")
#####
library(MASS)
library(class)
library(mvtnorm)
library(mvnormtest)
library(car)
library(MASS)
library(class)
library(rms)
library(arm)
library(ResourceSelection)
library(pROC)
mcshapiro.test <- function(X, devstmax = 0.01, sim = ceiling(1/(4*devstmax^2)))
{
library(mvnormtest)
n   <- dim(X)[1]
p   <- dim(X)[2]
mu  <- rep(0,p)
sig <- diag(p)
W   <- NULL
for(i in 1:sim)
{
Xsim <- rmvnorm(n, mu, sig)
W   <- c(W, mshapiro.test(t(Xsim))$stat)
# mshapiro.test(X): compute the statistics min(W) for the sample X
}
Wmin   <- mshapiro.test(t(X))$stat   # min(W) for the given sample
pvalue <- sum(W < Wmin)/sim          # proportion of min(W) more extreme than the observed Wmin
devst  <- sqrt(pvalue*(1-pvalue)/sim)
list(Wmin = as.vector(Wmin), pvalue = pvalue, devst = devst, sim = sim)
}
library(readr)
jazz_data<- read_csv("jazz.csv")
jazz_data$genre<-"jazz"
jazz_data$binary_genre<-0
classical_data<-read_csv("classical.csv")
classical_data$genre<-"classical"
classical_data$binary_genre<-1
data<-rbind(jazz_data,classical_data)
genre<-factor(data$genre)
levels(genre)
#priors
p<-c(1/2,1/2)
#gauss
mcshapiro.test(data[which(genre=="classical"),1:7])
mcshapiro.test(data[which(genre=="jazz"),1:7])
#covariance
v1<-var(data[which(genre=="classical"),1:7])
v2<-var(data[which(genre=="jazz"),1:7])
v1
v2
#QDA (dati gaussiani, no same covariance)
q<-qda(data$genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast  ,prior=p)
q #means
#aper
Qda.m <- predict(q)
f= factor(genre)
table(true.lable=f, class.assigned=Qda.m$class)
l <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Qda.m$class )
APER_qda <- 0
for(i in 1:l){
APER_qda <- APER_qda + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER_qda
#LDA (dati NON gaussiani, same covariance)
l<-lda(data$genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast  ,prior=p)
l #means
#aper
Lda.m <- predict(l)
f= factor(genre)
table(true.lable=f, class.assigned=Lda.m$class)
len <-length(levels(as.factor(f)))
t <- table(true.label = f , assigned.label =Lda.m$class )
APER_lda <- 0
for(i in 1:len){
APER_lda <- APER_lda + sum(t[i,-i])*p[i]/sum(t[i,])
}
APER_lda
glm_model<-glm(data$binary_genre~ data$zcr+data$rms_energy+data$mean_chroma+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast ,family=binomial( link = logit ))
glm_model
summary(glm_model)
glm_model_1<-glm(data$binary_genre~ data$zcr+data$rms_energy+data$spec_flat+data$hf_contrast+data$mf_contrast+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model_1)
summary(glm_model_2)
glm_model_2<-glm(data$binary_genre~ data$zcr+data$rms_energy+data$spec_flat+data$mf_contrast+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model_2)
glm_model_3<-glm(data$binary_genre~ data$zcr+data$rms_energy+data$spec_flat+data$lf_contrast ,family=binomial( link = logit ))
summary(glm_model_3)
anova( glm_model_3, glm_model, test = "Chisq" )
#table
threshold = 0.5
real  = data$binary_genre
predicted = as.numeric( glm_model_3$fitted.values > threshold )
tab = table( real, predicted )
tab
#% casi classificati correttamente
accuracy=round( sum( diag( tab ) ) / sum( tab ), 2 )
accuracy
#% casi 1 classificati come 1
sensitivity=tab [ 2, 2 ] /( tab [ 2, 1 ] + tab [ 2, 2 ] )
sensitivity
#% casi 0 classificati come 0
specificity= tab[ 1, 1 ] /( tab [ 1, 2 ] + tab [ 1, 1 ] )
specificity
1-accuracy
